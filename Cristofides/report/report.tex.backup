\documentclass{iiufrgs}
\usepackage[utf8]{inputenc}   % pacote para acentuação
\usepackage{graphicx}           % pacote para importar figuras
\usepackage{times}              % pacote para usar fonte Adobe Times
\usepackage{framed}             % para exemplos e TODOs
\usepackage{biblatex}           % para referências bibliográficas
\usepackage{xcolor}             % cores
\usepackage{hyperref}           % referências
\usepackage{amsmath}
\usepackage{float}

\usepackage{pgfplots}
\usepackage{pgfplotstable}
\usepackage{tikz}

\colorlet{shadecolor}{orange!15}

\title{Laboratório 5 - Algoritmo de Cristofides}
\author{}{Thiago Bell}

\addbibresource{report.bib}

\begin{document}
\maketitle

\setcounter{chapter}{1}

\section{Tarefa}
Implementar o algoritmo de Cristofides para o problema do caixeiro viajante.

\section{Implementaç\~ao}
O algoritmo foi implementado em C++. A implementação de grafo é feita através do
armazenamento de cada aresta em uma estrutura de dados especial.


\section{Ambiente de Teste}
Os experimentos foram realizados usando um processador Intel  i5-2540M 
acompanhado de 6 GiB de RAM. 
O sistema operacional utilizado foi Debian Linux.

\section{Análise de Complexidade do Algoritmo de Hopcroft-Karp}
A complexidade teórica do algoritmo foi comparado com resultados experimentais.
Conclui-se que a implementaç\~ao respeita as previs\~oes teóricas.

\subsection{Complexidade}
A complexidade do algoritmo é de:

\begin{equation*}
\label{eq:ql}
O(sqrt(n)(n+m))
\end{equation*}
Para demonstrar que a implementação respeita esse limite, fez-se dois testes. Um fixando o número de arestas e variando o de vértices.
Outro, fixando o de vértices e variando o de arestas.

Também, o número de fases do algoritmo é limitado por 

\begin{equation*}
\label{eq:ql}
O(sqrt(n))
\end{equation*}
Em todas os testes, esse limitante superior foi respeitado.

\subsection{Fixando o Número de Arestas}
Fixou-se o número de arestas em aproximadamente 1.67 milhões. O número de vértices foi variado entre $2^{12}$ a $2^{15}$. Comparando-se o tempo de execução e o custo teórico
esperado, conclui-se a adesão da implementação a complexidade prevista.

\begin{figure}[H]
\centering
\begin{tikzpicture}
\begin{axis}[
  title={},
  ymin = 0,
  xlabel= vértices (expoente),
  ylabel=raz\~ao],
\addplot +[mark=o, color=red] table [x=i, y=ratio, col sep=comma] {data_fixedge.csv};
\end{axis}
\end{tikzpicture}
\caption{Mostra a raz\~ao entre o custo teórico esperado e o tempo de execuç\~ao}
\label{fig:comparison}
\end{figure}

\subsection{Fixando o Número de Vértices}
Fixou-se o número de vértices em 16384. O número de arestas foi variado entre $838971$ a $6710515$. Comparando-se o tempo de execução e o custo teórico 
esperado, conclui-se a adesão da implementação a complexidade prevista.

\begin{figure}[H]
\centering
\begin{tikzpicture}
\begin{axis}[
  title={},
  ymin = 0,
  xlabel=arestas,
  ylabel=raz\~ao],
\addplot +[mark=o, color=red] table [x=m, y=ratio, col sep=comma] {data_fixvertex.csv};
\end{axis}
\end{tikzpicture}
\caption{Mostra a raz\~ao entre o custo teórico esperado e o tempo de execuç\~ao}
\label{fig:comparison}
\end{figure}

\section{Comparação entre Hopcroft-Karp e Redução a Maxflow}
Comparou-se os tempos de execução entre o algoritmo implementado e a execução do algoritmo de Ford-Fulkerson com estratégia de caminho mais gordo com a mesma instância reduzida ao
problema do fluxo máximo.
O algoritmo de Hopcroft-Karp foi significativamente mais rápido. Para 4096 vértices e 1679005 arestas, o tempo de execução para o primeiro foi de $13.8 ms$ (repetiu-se a execução 300 vezes 
para evitar problemas de precisão de relógio e obter uma medida precisa). Para o Ford-Fulkerson o tempo foi de $94.3s$. Dessa forma, o algoritmo de Hopcroft-Karp tem uma performance ordens
de grandeza melhor.


\section{Conclus\~ao}
Implementou-se o algoritmo de Hopcroft-Karp . Verificou-se que a implementação respeita a
complexidade do algoritmo. Além disso, esse algoritmo tem melhor performance que o de Fork-Fulkerson com uma mesma instância reduzida ao problema de fluxo máximo.
\end{document}
